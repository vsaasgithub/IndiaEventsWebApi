Where(x => Convert.ToString(x.Cells[Convert.ToInt32(UrlData.Columns.Where(y => y.Title == "User").Select(z => z.Index).FirstOrDefault())].Value) == "Finance Accounts URL")

[HttpGet("GetDataFromAllSheetsByEventIdInPreEvent")]
        public IActionResult GetDataFromAllSheetsByEventIdInPreEvent(string eventId)
        {
            Dictionary<string, object> resultData = new();

            List<UpdateDataForClassI> formData = new();

            List<Dictionary<string, object>> eventDetails = new();
            List<Dictionary<string, object>> BrandseventDetails = new();
            List<Dictionary<string, object>> InviteeseventDetails = new();
            List<Dictionary<string, object>> PaneleventDetails = new();
            List<Dictionary<string, object>> SlideKiteventDetails = new();
            List<Dictionary<string, object>> ExpenseeventDetails = new();
            List<Dictionary<string, object>> BeneficiarteventDetails = new();
            List<Dictionary<string, object>> ProductBrandsListeventDetails = new();
            List<Dictionary<string, object>> attachmentsList = new List<Dictionary<string, object>>();
            List<Dictionary<string, object>> DeviationsattachmentsList = new List<Dictionary<string, object>>();
            List<Dictionary<string, object>> attachmentInfoFiles = new();

            Sheet sheet1 = SheetHelper.GetSheetById(smartsheet, sheetId1);//.Rows.Where(row => row.Cells.Any(c =>c.DisplayValue ==eventId));
            Sheet sheet2 = SheetHelper.GetSheetById(smartsheet, sheetId2);
            Sheet sheet3 = SheetHelper.GetSheetById(smartsheet, sheetId3);
            Sheet sheet4 = SheetHelper.GetSheetById(smartsheet, sheetId4);
            Sheet sheet5 = SheetHelper.GetSheetById(smartsheet, sheetId5);
            Sheet sheet6 = SheetHelper.GetSheetById(smartsheet, sheetId6);
            Sheet sheet7 = SheetHelper.GetSheetById(smartsheet, sheetId7);
            Sheet sheet8 = SheetHelper.GetSheetById(smartsheet, sheetId8);
            Sheet sheet9 = SheetHelper.GetSheetById(smartsheet, sheetId9);

            List<string> columnNames = sheet1.Columns.Select(col => col.Title).ToList();

            //List<string> columnNames = new List<string>();
            //foreach (Column column in sheet1.Columns)
            //{
            //    columnNames.Add(column.Title);
            //}
            foreach (var row in sheet1.Rows.Where(row => row.Cells.Any(c => c.DisplayValue == eventId)))
            {
                Dictionary<string, object> rowData = new Dictionary<string, object>
                {
                    { "EventDate", GetValueOrDefault(row, "Event Date") },
                    { "EventEndDate", GetValueOrDefault(row, "End Date") },
                    { "EventTopic", GetValueOrDefault(row, "Event Topic") },
                    { "ClassIIIEventCode", GetValueOrDefault(row, "Class III Event Code") },
                    { "StartTime", GetValueOrDefault(row, "Start Time") },
                    { "EndTime", GetValueOrDefault(row, "End Time") },
                    { "State", GetValueOrDefault(row, "State") },
                    { "VenueName", GetValueOrDefault(row, "Venue Name") },
                    { "City", GetValueOrDefault(row, "City") },
                    { "Brands", GetValueOrDefault(row, "Brands") },
                    { "Panelists", GetValueOrDefault(row, "Panelists") },
                    { "SlideKits", GetValueOrDefault(row, "SlideKits") },
                    { "Invitees", GetValueOrDefault(row, "Invitees") },
                    { "MIPLInvitees", GetValueOrDefault(row, "MIPL Invitees") },
                    { "Expenses", GetValueOrDefault(row, "Expenses") },
                    { "MeetingType", GetValueOrDefault(row, "Meeting Type") },
                    { "ModeOfTraining", GetValueOrDefault(row, "Mode of Training") },
                    { "EmergencySupport", GetValueOrDefault(row, "Emergency Support") },
                    { "IsFacilityCharges", GetValueOrDefault(row, "Facility Charges") },
                    { "FacilityChargesBTC/BTE", GetValueOrDefault(row, "Facility Charges BTC/BTE") },
                    { "FacilityChargesIncludingTax", GetValueOrDefault(row, "Total Facility Charges Including Tax") },
                    { "FacilityChargesExcludingTax", GetValueOrDefault(row, "Facility Charges Excluding Tax") },
                    { "HOTWebinarType", GetValueOrDefault(row, "HOT Webinar Type") },
                    { "HOTWebinarVendorName", GetValueOrDefault(row, "HOT Webinar Vendor Name") },
                    { "VenueSelectionChecklist", GetValueOrDefault(row, "Venue Selection Checklist") },
                    { "EmergencyContactNo", GetValueOrDefault(row, "Emergency Contact No") },
                    { "IsAnesthetistRequired", GetValueOrDefault(row, "Anesthetist Required?") },
                    { "AnesthetistBTC/BTE", GetValueOrDefault(row, "Anesthetist BTC/BTE") },
                    { "AnesthetistExcludingTax", GetValueOrDefault(row, "Anesthetist Excluding Tax") },
                    { "AnesthetistincludingTax", GetValueOrDefault(row, "Anesthetist including Tax") }
                };
                PaginatedResult<Attachment> attachments = smartsheet.SheetResources.RowResources.AttachmentResources.ListAttachments(sheet1.Id.Value, row.Id.Value, null);

                if (attachments.Data != null && attachments.Data.Count > 0)
                {
                    foreach (var attachment in attachments.Data)
                    {
                        long AID = (long)attachment.Id;
                        Attachment file = smartsheet.SheetResources.AttachmentResources.GetAttachment(sheet1.Id.Value, AID);
                        Dictionary<string, object> attachmentInfoData = new Dictionary<string, object>
                        {
                            { "Name", file.Name },
                            { "Id", file.Id },
                            { "base64", SheetHelper.UrlToBaseValue(file.Url) }
                        };
                        attachmentInfoFiles.Add(attachmentInfoData);
                    }
                }

                eventDetails.Add(rowData);
            }
            string? GetValueOrDefault(Row row, string columnName)
            {
                int columnIndex = columnNames.IndexOf(columnName);
                if (columnIndex >= 0 && columnIndex < row.Cells.Count)
                {
                    return row.Cells[columnIndex].Value?.ToString();
                }
                return null;
            }

            List<string> BrandsColumnNames = sheet2.Columns.Select(col => col.Title).ToList(); //new List<string>();
            //foreach (Column column in sheet2.Columns)
            //{
            //    BrandsColumnNames.Add(column.Title);
            //}
            foreach (var row in sheet2.Rows)
            {

                if (row.Cells.Any(c => c.DisplayValue == eventId))
                {
                    List<string> BrandscolumnsToInclude = new List<string> { "BrandRequestID", "Brands", "% Allocation", "Project ID" };

                    Dictionary<string, object> BrandsrowData = new Dictionary<string, object>();
                    for (int i = 0; i < BrandsColumnNames.Count; i++)
                    {
                        if (BrandscolumnsToInclude.Contains(BrandsColumnNames[i]))
                        {
                            BrandsrowData[BrandsColumnNames[i]] = row.Cells[i].Value;
                        }
                    }
                    PaginatedResult<Attachment> attachments = smartsheet.SheetResources.RowResources.AttachmentResources.ListAttachments(sheet2.Id.Value, row.Id.Value, null);

                    List<Dictionary<string, object>> BrandsattachmentsList = new();
                    if (attachments.Data != null || attachments.Data.Count > 0)
                    {
                        foreach (var attachment in attachments.Data)
                        {
                            long AID = (long)attachment.Id;
                            Attachment file = smartsheet.SheetResources.AttachmentResources.GetAttachment(sheet2.Id.Value, AID);
                            Dictionary<string, object> attachmentInfo = new()
                            {
                                { "Name", file.Name },
                                { "Id", file.Id },
                                { "base64", SheetHelper.UrlToBaseValue(file.Url) }
                            };
                            BrandsattachmentsList.Add(attachmentInfo);
                        }
                        BrandsrowData["Attachments"] = BrandsattachmentsList;
                    }
                    BrandseventDetails.Add(BrandsrowData);
                }
            }

            List<string> InviteesColumnNames = sheet3.Columns.Select(col => col.Title).ToList(); //new List<string>();
            //foreach (Column column in sheet3.Columns)
            //{
            //    InviteesColumnNames.Add(column.Title);
            //}
            foreach (var row in sheet3.Rows)
            {
                if (row.Cells.Any(c => c.DisplayValue == eventId))
                {
                    List<string> InviteescolumnsToInclude = new List<string> { "INV", "Invitee Source", "HCPName", "MISCode", "Employee Code", "LocalConveyance", "BTC/BTE", "LocalConveyance", "Speciality", "Lc Amount Excluding Tax", "LcAmount" };
                    Dictionary<string, object> InviteesrowData = new Dictionary<string, object>();
                    for (int i = 0; i < InviteesColumnNames.Count; i++)
                    {
                        if (InviteescolumnsToInclude.Contains(InviteesColumnNames[i]))
                        {
                            InviteesrowData[InviteesColumnNames[i]] = row.Cells[i].Value;
                        }
                    }
                    PaginatedResult<Attachment> attachments = smartsheet.SheetResources.RowResources.AttachmentResources.ListAttachments(sheet3.Id.Value, row.Id.Value, null);

                    List<Dictionary<string, object>> InviteesattachmentsList = new();
                    if (attachments.Data != null || attachments.Data.Count > 0)
                    {
                        foreach (var attachment in attachments.Data)
                        {
                            long AID = (long)attachment.Id;
                            Attachment file = smartsheet.SheetResources.AttachmentResources.GetAttachment(sheet3.Id.Value, AID);
                            Dictionary<string, object> attachmentInfo = new()
                            {
                                { "Name", file.Name },
                                { "Id", file.Id },
                                { "base64" , SheetHelper.UrlToBaseValue(file.Url) }
                            };
                            InviteesattachmentsList.Add(attachmentInfo);
                        }
                        InviteesrowData["Attachments"] = InviteesattachmentsList;
                    }
                    InviteeseventDetails.Add(InviteesrowData);
                }
            }

            List<string> PanelColumnNames = sheet1.Columns.Select(col => col.Title).ToList(); //new List<string>();
            //foreach (Column column in sheet4.Columns)
            //{
            //    PanelColumnNames.Add(column.Title);
            //}
            foreach (var row in sheet4.Rows)
            {
                if (row.Cells.Any(c => c.DisplayValue == eventId))
                {
                    List<string> PanelcolumnsToInclude = new List<string> { "Panelist ID", "SpeakerCode", "TrainerCode", "Tier", "Qualification", "Speciality", "Country",
                        "Rationale", "Speciality", "FCPA Date", "LcAmount", "PresentationDuration", "PanelSessionPreparationDuration", "PanelDiscussionDuration", "QASessionDuration",
                        "BriefingSession", "TotalSessionHours", "HcpRole", "HCPName", "MISCode", "HCP Type", "ExpenseType", "HonorariumRequired", "HonorariumAmount", "Honorarium Amount Excluding Tax",
                        "Travel BTC/BTE", "Mode of Travel", "Travel Excluding Tax", "Travel", "Accomodation Excluding Tax", "Accomodation","Accomodation BTC/BTE","Annual Trainer Agreement Valid?",
                        "Local Conveyance Excluding Tax", "LocalConveyance", "LC BTC/BTE",
                        "PAN card name", "Bank Account Number", "IFSC Code", "Bank Name", "Currency", "Other Currency", "Beneficiary Name", "Pan Number", "Global FMV", "Swift Code" };

                    Dictionary<string, object> PanelrowData = new Dictionary<string, object>();
                    for (int i = 0; i < PanelColumnNames.Count; i++)
                    {
                        if (PanelcolumnsToInclude.Contains(PanelColumnNames[i]))
                        {
                            PanelrowData[PanelColumnNames[i]] = row.Cells[i].Value;
                        }
                    }
                    PaginatedResult<Attachment> attachments = smartsheet.SheetResources.RowResources.AttachmentResources.ListAttachments(sheet4.Id.Value, row.Id.Value, null);

                    List<Dictionary<string, object>> PanelattachmentsList = new();
                    if (attachments.Data != null || attachments.Data.Count > 0)
                    {
                        foreach (var attachment in attachments.Data)
                        {
                            long AID = (long)attachment.Id;
                            Attachment file = smartsheet.SheetResources.AttachmentResources.GetAttachment(sheet4.Id.Value, AID);
                            Dictionary<string, object> attachmentInfo = new()
                            {
                                { "Name", file.Name },
                                { "Id", file.Id },
                                { "base64" , SheetHelper.UrlToBaseValue(file.Url) }
                            };
                            PanelattachmentsList.Add(attachmentInfo);
                        }
                        PanelrowData["Attachments"] = PanelattachmentsList;
                    }
                    PaneleventDetails.Add(PanelrowData);
                }
            }

            List<string> SlideKitColumnNames = sheet1.Columns.Select(col => col.Title).ToList(); //new List<string>();
            //foreach (Column column in sheet5.Columns)
            //{
            //    SlideKitColumnNames.Add(column.Title);
            //}
            foreach (var row in sheet5.Rows)
            {
                if (row.Cells.Any(c => c.DisplayValue == eventId))
                {
                    List<string> SlideKitcolumnsToInclude = new List<string> { "SlideKit ID", "HCP Name", "MIS", "HcpType", "Slide Kit Type", "SlideKit Document" };

                    Dictionary<string, object> SlideKitrowData = new Dictionary<string, object>();
                    for (int i = 0; i < SlideKitColumnNames.Count; i++)
                    {
                        if (SlideKitcolumnsToInclude.Contains(SlideKitColumnNames[i]))
                        {
                            SlideKitrowData[SlideKitColumnNames[i]] = row.Cells[i].Value;
                        }
                    }
                    PaginatedResult<Attachment> attachments = smartsheet.SheetResources.RowResources.AttachmentResources.ListAttachments(sheet5.Id.Value, row.Id.Value, null);

                    List<Dictionary<string, object>> SlideKitattachmentsList = new();
                    if (attachments.Data != null || attachments.Data.Count > 0)
                    {
                        foreach (var attachment in attachments.Data)
                        {
                            long AID = (long)attachment.Id;
                            Attachment file = smartsheet.SheetResources.AttachmentResources.GetAttachment(sheet5.Id.Value, AID);
                            Dictionary<string, object> attachmentInfo = new()
                            {
                                { "Name", file.Name },
                                { "Id", file.Id },
                                { "base64" , SheetHelper.UrlToBaseValue(file.Url) }
                            };
                            SlideKitattachmentsList.Add(attachmentInfo);
                        }
                        SlideKitrowData["Attachments"] = SlideKitattachmentsList;
                    }
                    SlideKiteventDetails.Add(SlideKitrowData);
                }
            }

            List<string> ExpenseColumnNames = sheet1.Columns.Select(col => col.Title).ToList(); //new List<string>();
            //foreach (Column column in sheet6.Columns)
            //{
            //    ExpenseColumnNames.Add(column.Title);
            //}
            foreach (var row in sheet6.Rows)
            {
                if (row.Cells.Any(c => c.DisplayValue == eventId))
                {
                    List<string> ExpensecolumnsToInclude = new List<string> { "Expenses ID", "Expense", "BTC/BTE", "Amount Excluding Tax", "Amount" };

                    Dictionary<string, object> ExpenserowData = new Dictionary<string, object>();
                    for (int i = 0; i < ExpenseColumnNames.Count; i++)
                    {
                        if (ExpensecolumnsToInclude.Contains(ExpenseColumnNames[i]))
                        {
                            ExpenserowData[ExpenseColumnNames[i]] = row.Cells[i].Value;
                        }
                    }
                    ExpenseeventDetails.Add(ExpenserowData);
                }
            }

            List<string> DeviationscolumnNames = sheet1.Columns.Select(col => col.Title).ToList(); //new List<string>();
            //foreach (Column column in sheet7.Columns)
            //{
            //    DeviationscolumnNames.Add(column.Title);
            //}
            foreach (var row in sheet7.Rows)
            {
                if (row.Cells.Any(c => c.DisplayValue == eventId))
                {
                    List<string> DeviationscolumnsToInclude = new List<string> { "Deviation Type" };

                    Dictionary<string, object> DeviationsattachmentInfo = new Dictionary<string, object>();
                    for (int i = 0; i < DeviationscolumnNames.Count; i++)
                    {
                        if (DeviationscolumnsToInclude.Contains(DeviationscolumnNames[i]))
                        {
                            var val = row.Cells[i].Value.ToString();
                            var attachments = smartsheet.SheetResources.RowResources.AttachmentResources.ListAttachments(sheet7.Id.Value, row.Id.Value, null);
                            foreach (var attachment in attachments.Data)
                            {
                                var AID = (long)attachment.Id;
                                var file = smartsheet.SheetResources.AttachmentResources.GetAttachment(sheet7.Id.Value, AID);
                                DeviationsattachmentInfo[val] = SheetHelper.UrlToBaseValue(file.Url);
                            }
                        }
                    }
                    DeviationsattachmentsList.Add(DeviationsattachmentInfo);
                }
            }

            List<string> EventRequestBeneficiary = sheet1.Columns.Select(col => col.Title).ToList();// new List<string>();
            //foreach (Column column in sheet8.Columns)
            //{
            //    EventRequestBeneficiary.Add(column.Title);
            //}
            foreach (var row in sheet8.Rows.Where(row => row.Cells.Any(c => c.DisplayValue == eventId)))
            {
                Dictionary<string, object> BeneficiaryrowData = new Dictionary<string, object>
                {
                    { "BenfId", GetValueOrDefaults(row, "Benf Id") },
                    { "EventType", GetValueOrDefaults(row, "EventType") },
                    { "EventDate", GetValueOrDefaults(row, "EventDate") },
                    { "VenueName", GetValueOrDefaults(row, "VenueName") },
                    { "State", GetValueOrDefaults(row, "State") },
                    { "IsFacilityCharges", GetValueOrDefaults(row, "Facility Charges") },
                    { "IsAnesthetistRequired", GetValueOrDefaults(row, "Anesthetist Required?") },
                    { "TypeOfBeneficiary", GetValueOrDefaults(row, "Type of Beneficiary") },
                    { "Currency", GetValueOrDefaults(row, "Currency") },
                    { "OtherCurrency", GetValueOrDefaults(row, "Other Currency") },
                    { "BeneficiaryName", GetValueOrDefaults(row, "Beneficiary Name") },
                    { "BankAccountNumber", GetValueOrDefaults(row, "Bank Account Number") },
                    { "BankName", GetValueOrDefaults(row, "Bank Name") },
                    { "PANcardName", GetValueOrDefaults(row, "PAN card name") },
                    { "PanNumber", GetValueOrDefaults(row, "Pan Number") },
                    { "IFSCCode", GetValueOrDefaults(row, "IFSC Code") },
                    { "EmailId", GetValueOrDefaults(row, "Email Id") },
                    { "SwiftCode", GetValueOrDefaults(row, "City") },
                    { "IBNNumber", GetValueOrDefaults(row, "IBN Number") },
                    { "TaxResidenceCertificateDate", GetValueOrDefaults(row, "Tax Residence Certificate Date") }

                };
                PaginatedResult<Attachment> attachments = smartsheet.SheetResources.RowResources.AttachmentResources.ListAttachments(sheet8.Id.Value, row.Id.Value, null);

                List<Dictionary<string, object>> SlideKitattachmentsList = new();
                if (attachments.Data != null || attachments.Data.Count > 0)
                {
                    foreach (var attachment in attachments.Data)
                    {
                        long AID = (long)attachment.Id;
                        Attachment file = smartsheet.SheetResources.AttachmentResources.GetAttachment(sheet8.Id.Value, AID);
                        Dictionary<string, object> attachmentInfo = new()
                            {
                                { "Name", file.Name },
                                { "Id", file.Id },
                                { "base64" , SheetHelper.UrlToBaseValue(file.Url) }
                            };
                        SlideKitattachmentsList.Add(attachmentInfo);
                    }
                    BeneficiaryrowData["Attachments"] = SlideKitattachmentsList;
                }



                BeneficiarteventDetails.Add(BeneficiaryrowData);
            }
            string? GetValueOrDefaults(Row row, string columnName)
            {
                int columnIndex = EventRequestBeneficiary.IndexOf(columnName);
                if (columnIndex >= 0 && columnIndex < row.Cells.Count)
                {
                    return row.Cells[columnIndex].Value?.ToString();
                }
                return null;
            }


            List<string> EventRequestProductBrandsList = sheet1.Columns.Select(col => col.Title).ToList(); //new List<string>();
            //foreach (Column column in sheet9.Columns)
            //{
            //    EventRequestProductBrandsList.Add(column.Title);
            //}
            foreach (var row in sheet9.Rows.Where(row => row.Cells.Any(c => c.DisplayValue == eventId)))
            {
                Dictionary<string, object> ProductBrandsListrowData = new Dictionary<string, object>
                {
                    { "Product ID", GetValuesOrDefaults(row, "Product ID") },
                    { "EventType", GetValuesOrDefaults(row, "EventType") },
                    { "EventDate", GetValuesOrDefaults(row, "EventDate") },
                    { "EventTopic", GetValuesOrDefaults(row, "Event Topic") },
                    { "ProductBrand", GetValuesOrDefaults(row, "Product Brand") },
                    { "ProductName", GetValuesOrDefaults(row, "Product Name") },
                    { "NoOfSamplesRequired", GetValuesOrDefaults(row, "No of Samples Required") },


                };
                PaginatedResult<Attachment> attachments = smartsheet.SheetResources.RowResources.AttachmentResources.ListAttachments(sheet9.Id.Value, row.Id.Value, null);

                List<Dictionary<string, object>> ProductBrandsListattachmentsList = new();
                if (attachments.Data != null || attachments.Data.Count > 0)
                {
                    foreach (var attachment in attachments.Data)
                    {
                        long AID = (long)attachment.Id;
                        Attachment file = smartsheet.SheetResources.AttachmentResources.GetAttachment(sheet9.Id.Value, AID);
                        Dictionary<string, object> attachmentInfo = new()
                            {
                                { "Name", file.Name },
                                { "Id", file.Id },
                                { "base64" , SheetHelper.UrlToBaseValue(file.Url) }
                            };
                        ProductBrandsListattachmentsList.Add(attachmentInfo);
                    }
                    ProductBrandsListrowData["Attachments"] = ProductBrandsListattachmentsList;
                }
                ProductBrandsListeventDetails.Add(ProductBrandsListrowData);
            }

            string? GetValuesOrDefaults(Row row, string columnName)
            {
                int columnIndex = EventRequestProductBrandsList.IndexOf(columnName);
                if (columnIndex >= 0 && columnIndex < row.Cells.Count)
                {
                    return row.Cells[columnIndex].Value?.ToString();
                }
                return null;
            }

            resultData["eventDetails"] = eventDetails;
            resultData["Files"] = attachmentInfoFiles;
            resultData["Brands"] = BrandseventDetails;
            resultData["Invitees"] = InviteeseventDetails;
            resultData["PanelDetails"] = PaneleventDetails;
            resultData["SlideKitSelection"] = SlideKiteventDetails;
            resultData["ExpenseSelection"] = ExpenseeventDetails;
            resultData["Deviation"] = DeviationsattachmentsList;
            resultData["EventRequestBeneficiary"] = BeneficiarteventDetails;
            resultData["EventRequestProductBrandsList"] = ProductBrandsListeventDetails;

            return Ok(resultData);
        }






///////////////////////////////////////////////////////////////////////////////////////////









if (RequestWebhook != null && RequestWebhook.events != null)
                {
                    foreach (var WebHookEvent in RequestWebhook.events)
                    {
                        if (WebHookEvent.eventType.ToLower() == "updated" || WebHookEvent.eventType.ToLower() == "created")
                        {
                            Row targetRowId = TestingSheetData.Rows.FirstOrDefault(row => row.Id == WebHookEvent.rowId);
                            //var columnValue = targetRowId.Cells.FirstOrDefault(cell => cell.ColumnId == processIdColumn1.Id)?.Value.ToString();


                            if (targetRowId != null)
                            {
                                string? TriggerStatus = targetRowId.Cells.FirstOrDefault(cell => cell.ColumnId == Trigger.Id)?.Value.ToString();
                                string? status1 = targetRowId.Cells.FirstOrDefault(cell => cell.ColumnId == Column1.Id)?.Value?.ToString() ?? "Null";
                                string? status2 = targetRowId.Cells.FirstOrDefault(cell => cell.ColumnId == Column2.Id)?.Value?.ToString() ?? "Null";
                                string? status3 = targetRowId.Cells.FirstOrDefault(cell => cell.ColumnId == Column3.Id)?.Value?.ToString() ?? "Null";
                                string? status4 = targetRowId.Cells.FirstOrDefault(cell => cell.ColumnId == Column4.Id)?.Value?.ToString() ?? "Null";
                                string? status5 = targetRowId.Cells.FirstOrDefault(cell => cell.ColumnId == Column5.Id)?.Value?.ToString() ?? "Null";
                                string? status6 = targetRowId.Cells.FirstOrDefault(cell => cell.ColumnId == Column6.Id)?.Value?.ToString() ?? "Null";
                                string? status7 = targetRowId.Cells.FirstOrDefault(cell => cell.ColumnId == Column7.Id)?.Value?.ToString() ?? "Null";
                                string? status8 = targetRowId.Cells.FirstOrDefault(cell => cell.ColumnId == Column8.Id)?.Value?.ToString() ?? "Null";
                                string? status9 = targetRowId.Cells.FirstOrDefault(cell => cell.ColumnId == Column9.Id)?.Value?.ToString() ?? "Null";
                                
                                if(status1.ToLower() == "approved")
                                {
                                    long honorariumSubmittedColumnId = SheetHelper.GetColumnIdByName(TestingSheetData, "post 45 days approved");
                                    Cell cellToUpdateB = new() { ColumnId = honorariumSubmittedColumnId, Value = "Yes" };
                                    Row updateRow = new() { Id = targetRowId.Id, Cells = new Cell[] { cellToUpdateB } };
                                    Cell? cellToUpdate = targetRowId.Cells.FirstOrDefault(c => c.ColumnId == honorariumSubmittedColumnId);
                                    if (cellToUpdate != null) { cellToUpdate.Value = "Yes"; }

                                    smartsheet.SheetResources.RowResources.UpdateRows(TestingSheetData.Id.Value, new Row[] { updateRow });
                                }
                                if (status2.ToLower() == "approved")
                                {
                                    long honorariumSubmittedColumnId = SheetHelper.GetColumnIdByName(TestingSheetData, "Post <5 Invitees Approved");
                                    Cell cellToUpdateB = new() { ColumnId = honorariumSubmittedColumnId, Value = "Yes" };
                                    Row updateRow = new() { Id = targetRowId.Id, Cells = new Cell[] { cellToUpdateB } };
                                    Cell? cellToUpdate = targetRowId.Cells.FirstOrDefault(c => c.ColumnId == honorariumSubmittedColumnId);
                                    if (cellToUpdate != null) { cellToUpdate.Value = "Yes"; }

                                    smartsheet.SheetResources.RowResources.UpdateRows(TestingSheetData.Id.Value, new Row[] { updateRow });
                                }
                                if (status3.ToLower() == "approved")
                                {
                                    long honorariumSubmittedColumnId = SheetHelper.GetColumnIdByName(TestingSheetData, "Post CostperPax Approved");
                                    Cell cellToUpdateB = new() { ColumnId = honorariumSubmittedColumnId, Value = "Yes" };
                                    Row updateRow = new() { Id = targetRowId.Id, Cells = new Cell[] { cellToUpdateB } };
                                    Cell? cellToUpdate = targetRowId.Cells.FirstOrDefault(c => c.ColumnId == honorariumSubmittedColumnId);
                                    if (cellToUpdate != null) { cellToUpdate.Value = "Yes"; }

                                    smartsheet.SheetResources.RowResources.UpdateRows(TestingSheetData.Id.Value, new Row[] { updateRow });
                                }
                                if (status4.ToLower() == "approved")
                                {
                                    long honorariumSubmittedColumnId = SheetHelper.GetColumnIdByName(TestingSheetData, "Post ChangeInVenue Approved");
                                    Cell cellToUpdateB = new() { ColumnId = honorariumSubmittedColumnId, Value = "Yes" };
                                    Row updateRow = new() { Id = targetRowId.Id, Cells = new Cell[] { cellToUpdateB } };
                                    Cell? cellToUpdate = targetRowId.Cells.FirstOrDefault(c => c.ColumnId == honorariumSubmittedColumnId);
                                    if (cellToUpdate != null) { cellToUpdate.Value = "Yes"; }

                                    smartsheet.SheetResources.RowResources.UpdateRows(TestingSheetData.Id.Value, new Row[] { updateRow });
                                }
                                if (status5.ToLower() == "approved")
                                {
                                    long honorariumSubmittedColumnId = SheetHelper.GetColumnIdByName(TestingSheetData, "Post ChangeInTopic Approved");
                                    Cell cellToUpdateB = new() { ColumnId = honorariumSubmittedColumnId, Value = "Yes" };
                                    Row updateRow = new() { Id = targetRowId.Id, Cells = new Cell[] { cellToUpdateB } };
                                    Cell? cellToUpdate = targetRowId.Cells.FirstOrDefault(c => c.ColumnId == honorariumSubmittedColumnId);
                                    if (cellToUpdate != null) { cellToUpdate.Value = "Yes"; }

                                    smartsheet.SheetResources.RowResources.UpdateRows(TestingSheetData.Id.Value, new Row[] { updateRow });
                                }
                                if (status6.ToLower() == "approved")
                                {
                                    long honorariumSubmittedColumnId = SheetHelper.GetColumnIdByName(TestingSheetData, "Post ChangeInSpeaker Approved");
                                    Cell cellToUpdateB = new() { ColumnId = honorariumSubmittedColumnId, Value = "Yes" };
                                    Row updateRow = new() { Id = targetRowId.Id, Cells = new Cell[] { cellToUpdateB } };
                                    Cell? cellToUpdate = targetRowId.Cells.FirstOrDefault(c => c.ColumnId == honorariumSubmittedColumnId);
                                    if (cellToUpdate != null) { cellToUpdate.Value = "Yes"; }

                                    smartsheet.SheetResources.RowResources.UpdateRows(TestingSheetData.Id.Value, new Row[] { updateRow });
                                }
                                if (status7.ToLower() == "approved")
                                {
                                    long honorariumSubmittedColumnId = SheetHelper.GetColumnIdByName(TestingSheetData, "Post AttendeesNotCaptured Approved");
                                    Cell cellToUpdateB = new() { ColumnId = honorariumSubmittedColumnId, Value = "Yes" };
                                    Row updateRow = new() { Id = targetRowId.Id, Cells = new Cell[] { cellToUpdateB } };
                                    Cell? cellToUpdate = targetRowId.Cells.FirstOrDefault(c => c.ColumnId == honorariumSubmittedColumnId);
                                    if (cellToUpdate != null) { cellToUpdate.Value = "Yes"; }

                                    smartsheet.SheetResources.RowResources.UpdateRows(TestingSheetData.Id.Value, new Row[] { updateRow });
                                }
                                if (status8.ToLower() == "approved")
                                {
                                    long honorariumSubmittedColumnId = SheetHelper.GetColumnIdByName(TestingSheetData, "Post SpeakerNotCaptured Approved");
                                    Cell cellToUpdateB = new() { ColumnId = honorariumSubmittedColumnId, Value = "Yes" };
                                    Row updateRow = new() { Id = targetRowId.Id, Cells = new Cell[] { cellToUpdateB } };
                                    Cell? cellToUpdate = targetRowId.Cells.FirstOrDefault(c => c.ColumnId == honorariumSubmittedColumnId);
                                    if (cellToUpdate != null) { cellToUpdate.Value = "Yes"; }

                                    smartsheet.SheetResources.RowResources.UpdateRows(TestingSheetData.Id.Value, new Row[] { updateRow });
                                }
                                if (status9.ToLower() == "approved")
                                {
                                    long honorariumSubmittedColumnId = SheetHelper.GetColumnIdByName(TestingSheetData, "Post OtherDeviation Approved");
                                    Cell cellToUpdateB = new() { ColumnId = honorariumSubmittedColumnId, Value = "Yes" };
                                    Row updateRow = new() { Id = targetRowId.Id, Cells = new Cell[] { cellToUpdateB } };
                                    Cell? cellToUpdate = targetRowId.Cells.FirstOrDefault(c => c.ColumnId == honorariumSubmittedColumnId);
                                    if (cellToUpdate != null) { cellToUpdate.Value = "Yes"; }

                                    smartsheet.SheetResources.RowResources.UpdateRows(TestingSheetData.Id.Value, new Row[] { updateRow });
                                }










                                //if ((status1.ToLower() == "approved" || status1.ToLower() == "null") &&
                                // (status2.ToLower() == "approved" || status2.ToLower() == "null") &&
                                // (status3.ToLower() == "submitted" || status3.ToLower() == "null") &&
                                // (status4.ToLower() == "approved" || status4.ToLower() == "null") &&
                                // (status5.ToLower() == "approved" || status5.ToLower() == "null") &&
                                // (status6.ToLower() == "approved" || status6.ToLower() == "null") &&
                                // (status7.ToLower() == "approved" || status7.ToLower() == "null") &&
                                // (status8.ToLower() == "approved" || status8.ToLower() == "null") &&
                                // (status9.ToLower() == "approved" || status9.ToLower() == "null"))
                                //{

                                //    long honorariumSubmittedColumnId = SheetHelper.GetColumnIdByName(TestingSheetData, "Is All Deviations Approved?");
                                //    Cell cellToUpdateB = new() { ColumnId = honorariumSubmittedColumnId, Value = "Sales Deviations Approved" };
                                //    Row updateRow = new() { Id = targetRowId.Id, Cells = new Cell[] { cellToUpdateB } };
                                //    Cell? cellToUpdate = targetRowId.Cells.FirstOrDefault(c => c.ColumnId == honorariumSubmittedColumnId);
                                //    if (cellToUpdate != null) { cellToUpdate.Value = "Sales Deviations Approved"; }

                                //    smartsheet.SheetResources.RowResources.UpdateRows(TestingSheetData.Id.Value, new Row[] { updateRow });
                                //}
                                //else if (status3.ToLower() == "approved" || status3.ToLower() == "null")
                                ////TriggerStatus.ToLower() != "30 days deviation pending" ||
                                ////TriggerStatus.ToLower() != "Less than 5 invitees pending" ||

                                ////TriggerStatus.ToLower() != "cin pending" ||
                                ////TriggerStatus.ToLower() != "cis pending" ||
                                ////TriggerStatus.ToLower() != "cit pending" ||
                                ////TriggerStatus.ToLower() != "anc pending" ||
                                ////TriggerStatus.ToLower() != "snc is pending" ||
                                ////TriggerStatus.ToLower() != "od pending")
                                //{
                                //    long honorariumSubmittedColumnId = SheetHelper.GetColumnIdByName(TestingSheetData, "Is All Deviations Approved?");
                                //    Cell cellToUpdateB = new() { ColumnId = honorariumSubmittedColumnId, Value = "Finance Deviations Approved" };
                                //    Row updateRow = new() { Id = targetRowId.Id, Cells = new Cell[] { cellToUpdateB } };
                                //    Cell? cellToUpdate = targetRowId.Cells.FirstOrDefault(c => c.ColumnId == honorariumSubmittedColumnId);
                                //    if (cellToUpdate != null) { cellToUpdate.Value = "Finance Deviations Approved"; }

                                //    smartsheet.SheetResources.RowResources.UpdateRows(TestingSheetData.Id.Value, new Row[] { updateRow });
                                //}
                            }
                        }
                    }
                }
            }













EventOpenSalesHeadApproval
7daysSalesHeadApproval 
PRE-F&B Expense Excluding Tax Approval
HCP exceeds 1,00,000 FH Approval
HCP exceeds 5,00,000 Trigger FH Approval
HCP Honorarium 6,00,000 Exceeded Approval
Trainer Honorarium 12,00,000 Exceeded Approval
Travel/Accomodation 3,00,000 Exceeded Approval


30 days deviation pending
Less than 5 invitees pending

cost per pax pending
cin pending
cit pending
cis pending
anc pending
snc is pending
od pending



if (status1.ToLower() == "approved" || status1.ToLower() == null &&
                                 (status2.ToLower() == "approved" || status2.ToLower() == null &&
                                 (status3.ToLower() == "submitted" || status3.ToLower() == null &&
                                 (status4.ToLower() == "approved" || status4.ToLower() == null &&
                                 (status5.ToLower() == "approved" || status5.ToLower() == null &&
                                 (status6.ToLower() == "approved" || status6.ToLower() == null &&
                                 (status7.ToLower() == "approved" || status7.ToLower() == null &&
                                 (status8.ToLower() == "approved" || status8.ToLower() == null &&
                                 (status9.ToLower() == "approved" || status9.ToLower() == null)








            StringBuilder addedExpencesBTE = new();
            int addedExpencesNoBTE = 1;
            foreach (var formdata in formDataList.EventRequestExpenseSheet)
            {
                if (formdata.BtcorBte.ToLower() == "bte")
                {
                    string rowData = $"{addedExpencesNoBTE}. {formdata.Expense} | Amount: {formdata.Amount}";
                    addedExpencesBTE.AppendLine(rowData);
                    addedExpencesNoBTE++;
                }
            }
            string BTEExpense = addedExpencesBTE.ToString();






















Data change 




internal static string testingFile(string base64, string eventId, string name)
        {
            byte[] fileBytes = Convert.FromBase64String(base64);
            //var fileSize = (fileBytes.Length) / 1048576;
            var folderName = Path.Combine("Resources", "Images");
            var pathToSave = Path.Combine(Directory.GetCurrentDirectory(), folderName);
            if (!Directory.Exists(pathToSave))
            {
                Directory.CreateDirectory(pathToSave);
            }
            string fileType = GetFileType(fileBytes);
            string fileName = eventId + "-" + name + "." + fileType;
            string filePath = Path.Combine(pathToSave, fileName);
            File.WriteAllBytes(filePath, fileBytes);
            return filePath;
        }










 foreach (var p in formDataList.class1.DeviationFiles)
                    {

                        string[] words = p.Split(':')[0].Split("*");
                        string r = words[1];
                        DeviationNames.Add(r);
                    }





        string[] nameSplit = p.Split("*");
        string[] words = nameSplit[1].Split(':');
        string r = words[0];
        string q = words[1];
        if (deviationname == r)
        {
            string name = nameSplit[0];
            string filePath = SheetHelper.testingFile(q, val, name);
            Row addedRow = addeddeviationrow[0];
            Attachment attachment = smartsheet.SheetResources.RowResources.AttachmentResources.AttachFile(sheet7.Id.Value, addedRow.Id.Value, filePath, "application/msword");
            Attachment attachmentinmain = smartsheet.SheetResources.RowResources.AttachmentResources.AttachFile(sheet1.Id.Value, addedRows[0].Id.Value, filePath, "application/msword");
            j++;
            if (System.IO.File.Exists(filePath))
            {
                SheetHelper.DeleteFile(filePath);
            }
        }
    








  List<Row> newRows = new();

                foreach (var formdata in formDataList.RequestBrandsList)
                {
                    Row newRow2 = new()
                    {
                        Cells = new List<Cell>()
                        {
                            new Cell { ColumnId = SheetHelper.GetColumnIdByName(sheet2, "% Allocation"), Value = formdata.PercentAllocation },
                            new Cell { ColumnId = SheetHelper.GetColumnIdByName(sheet2, "Brands"), Value = formdata.BrandName },
                            new Cell { ColumnId = SheetHelper.GetColumnIdByName(sheet2, "Project ID"), Value = formdata.ProjectId },
                            new Cell { ColumnId = SheetHelper.GetColumnIdByName(sheet2, "EventId/EventRequestId"), Value = val }
                        }
                    };

                    newRows.Add(newRow2);
                }

                smartsheet.SheetResources.RowResources.AddRows(sheet2.Id.Value, newRows.ToArray());
// adding multiple rows



  foreach (string p in formData.TrainerFiles)
                    {
                        string[] words = p.Split(':');
                        string r = words[0];
                        string q = words[1];
                        string name = r.Split(".")[0];
                        string filePath = SheetHelper.testingFile(q, val, name);
                        Row addedRow = row[0];
                        Attachment attachment = smartsheet.SheetResources.RowResources.AttachmentResources.AttachFile(
                               sheet4.Id.Value, addedRow.Id.Value, filePath, "application/msword");
                        x++;


                        if (System.IO.File.Exists(filePath))
                        {
                            SheetHelper.DeleteFile(filePath);
                        }
                    }


Row newRow3 = new()
                    {
                        Cells = new List<Cell>()
                        {
                            new Cell { ColumnId = SheetHelper.GetColumnIdByName(sheet3, "MISCode"), Value = formdata.MisCode },
                            new Cell { ColumnId = SheetHelper.GetColumnIdByName(sheet3, "HCPName"), Value = formdata.AttenderName },
                            new Cell { ColumnId = SheetHelper.GetColumnIdByName(sheet3, "HCP Type"), Value = formdata.AttenderType },
                            new Cell { ColumnId = SheetHelper.GetColumnIdByName(sheet3, "Designation"), Value = formdata.Designation },
                            new Cell { ColumnId = SheetHelper.GetColumnIdByName(sheet3, "Employee Code"), Value = formdata.EmployeeCode },
                            new Cell { ColumnId = SheetHelper.GetColumnIdByName(sheet3, "LocalConveyance"), Value = formdata.IsLocalConveyance },
                            new Cell { ColumnId = SheetHelper.GetColumnIdByName(sheet3, "BTC/BTE"), Value = formdata.IsBtcorBte },
                            new Cell { ColumnId = SheetHelper.GetColumnIdByName(sheet3, "LcAmount"), Value = formdata.LocalConveyanceAmountIncludingTax },
                            new Cell { ColumnId = SheetHelper.GetColumnIdByName(sheet3, "Lc Amount Excluding Tax"), Value = formdata.LocalConveyanceAmountExcludingTax },
                            new Cell { ColumnId = SheetHelper.GetColumnIdByName(sheet3, "EventId/EventRequestId"), Value = val },
                            new Cell { ColumnId = SheetHelper.GetColumnIdByName(sheet3, "Invitee Source"), Value = formdata.InviteedFrom },
                            new Cell { ColumnId = SheetHelper.GetColumnIdByName(sheet3, "Qualification"), Value = formdata.Qualification },
                            new Cell { ColumnId = SheetHelper.GetColumnIdByName(sheet3, "Experience"), Value = formdata.Experiance },
                            new Cell { ColumnId = SheetHelper.GetColumnIdByName(sheet3, "Event Topic"), Value = formDataList.HandsOnTraining.EventName },
                            new Cell { ColumnId = SheetHelper.GetColumnIdByName(sheet3, "Event Type"), Value = formDataList.HandsOnTraining.EventType },
                            new Cell { ColumnId = SheetHelper.GetColumnIdByName(sheet3, "Venue name"), Value = formDataList.HandsOnTraining.VenueName },
                            new Cell { ColumnId = SheetHelper.GetColumnIdByName(sheet3, "Event Date Start"), Value = formDataList.HandsOnTraining.EventDate },
                            new Cell { ColumnId = SheetHelper.GetColumnIdByName(sheet3, "Event End Date"), Value = formDataList.HandsOnTraining.EventDate },

                        }
                    };














//int HM = int.Parse(formdata.HonarariumAmount);
                //int HM;
                //if (formdata.HonarariumAmount == null || !int.TryParse(formdata.HonarariumAmount, out HM))
                //{
                //    HM = 0;
                //}

                //int HM = int.TryParse(formdata.HonarariumAmount, out int result) ? result : 0;

                int HM = formdata.HonarariumAmount != null ? int.Parse(formdata.HonarariumAmount) : 0;






using Microsoft.AspNetCore.Authentication.Cookies;


























using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Authentication.Google;
using IndiaEventsWebApi.Models;
using DinkToPdf.Contracts;
using DinkToPdf;
using Serilog;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;
using System.Text;
using IndiaEventsWebApi.Helper;
using Microsoft.Extensions.DependencyInjection;
using Aspose.Pdf.Plugins;
using iTextSharp.text.pdf.security;
using Smartsheet.Api.Models;
using Microsoft.AspNetCore.Server.Kestrel.Core;

var builder = WebApplication.CreateBuilder(args);
var configuration = builder.Configuration;
int maxRequestLimit = 1073741824;

//builder.Services.AddSession(options => { options.IdleTimeout = TimeSpan.FromMinutes(60); });
builder.Services.AddAuthentication(options =>
{
    options.DefaultScheme = JwtBearerDefaults.AuthenticationScheme;
    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
})
.AddJwtBearer(options =>
{
    options.SaveToken = true;
    options.RequireHttpsMetadata = false;
    options.TokenValidationParameters = new TokenValidationParameters()
    {
        ValidateIssuer = true,
        ValidateAudience = true,
        ValidAudience = "ABM",
        ValidIssuer = "http://localhost:5098",
        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes("veryveryveryveryverysecret......................"))
    };
   
})

.AddGoogle(options =>
{
    options.ClientId = "644106526561-5899nb8044t0k47h4bdu6lk2aebs4g1s.apps.googleusercontent.com";
    options.ClientSecret = "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";

});

builder.Services.Configure<IISServerOptions>(options =>
{
    options.MaxRequestBodySize = 1073741824; // 1 GB in bytes
    options.MaxRequestBodyBufferSize = 1073741824;
});

builder.Services.Configure<KestrelServerOptions>(options =>
{
    options.Limits.MaxRequestBodySize = 1073741824; // 1 GB in bytes

    options.Limits.RequestHeadersTimeout = TimeSpan.FromMinutes(20); //  20 minutes
});
builder.Services.AddCors(option =>
{
    option.AddPolicy("MyPolicy", builder =>
    {
        builder.AllowAnyOrigin()
        .AllowAnyMethod()
        .AllowAnyHeader();
    });
});
IHostBuilder CreateHostBuilder(string[] args) =>
    Host.CreateDefaultBuilder(args)
    .ConfigureAppConfiguration((hostingContext, config) =>
    {
        config.AddJsonFile("appsettings.json", optional: true, reloadOnChange: true);
    })
.ConfigureServices((hostContext, services) =>
{
    IConfiguration configuration = hostContext.Configuration;
    services.AddSingleton(typeof(IConverter), new SynchronizedConverter(new PdfTools()));
    services.AddOptions();
    services.Configure<SmartsheetSettings>(configuration.GetSection("SmartsheetSettings"));


});

Log.Logger = new LoggerConfiguration()
    .WriteTo.Console()
    .CreateLogger();

builder.Host.UseSerilog((hostingContext, loggerConfiguration) =>
{
    loggerConfiguration.ReadFrom.Configuration(hostingContext.Configuration)
        .Enrich.FromLogContext()
        .WriteTo.Console();
}, preserveStaticLogger: true);



builder.Services.AddControllers();

builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();
builder.Services.AddSingleton(typeof(IConverter), new SynchronizedConverter(new PdfTools()));


var app = builder.Build();


//app.UseCors(options =>
//options.WithOrigins("http://localhost:4200")
//.AllowAnyMethod()
//.AllowAnyHeader()
//);
app.UseSwagger();
app.UseSwaggerUI();
app.UseHttpsRedirection();
app.UseCors("MyPolicy");
app.UseSerilogRequestLogging();
app.UseAuthentication();
app.UseAuthorization();

app.MapControllers();

app.Run();

